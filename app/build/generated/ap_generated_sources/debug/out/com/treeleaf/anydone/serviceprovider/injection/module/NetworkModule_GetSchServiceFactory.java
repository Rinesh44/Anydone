// Generated by Dagger (https://google.github.io/dagger).
package com.treeleaf.anydone.serviceprovider.injection.module;

import com.treeleaf.anydone.serviceprovider.rest.service.AnyDoneService;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class NetworkModule_GetSchServiceFactory implements Factory<AnyDoneService> {
  private final NetworkModule module;

  private final Provider<Retrofit> retrofitProvider;

  public NetworkModule_GetSchServiceFactory(
      NetworkModule module, Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public AnyDoneService get() {
    return provideInstance(module, retrofitProvider);
  }

  public static AnyDoneService provideInstance(
      NetworkModule module, Provider<Retrofit> retrofitProvider) {
    return proxyGetSchService(module, retrofitProvider.get());
  }

  public static NetworkModule_GetSchServiceFactory create(
      NetworkModule module, Provider<Retrofit> retrofitProvider) {
    return new NetworkModule_GetSchServiceFactory(module, retrofitProvider);
  }

  public static AnyDoneService proxyGetSchService(NetworkModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNull(
        instance.getSchService(retrofit),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
