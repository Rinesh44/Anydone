// Generated by Dagger (https://google.github.io/dagger).
package com.treeleaf.anydone.serviceprovider.injection.component;

import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.treeleaf.anydone.serviceprovider.account.AccountFragment;
import com.treeleaf.anydone.serviceprovider.account.AccountPresenterImpl;
import com.treeleaf.anydone.serviceprovider.account.AccountRepository;
import com.treeleaf.anydone.serviceprovider.addticket.AddTicketActivity;
import com.treeleaf.anydone.serviceprovider.addticket.AddTicketPresenterImpl;
import com.treeleaf.anydone.serviceprovider.addticket.AddTicketRepository;
import com.treeleaf.anydone.serviceprovider.assignemployee.AssignEmployeeActivity;
import com.treeleaf.anydone.serviceprovider.assignemployee.AssignEmployeePresenterImpl;
import com.treeleaf.anydone.serviceprovider.assignemployee.AssignEmployeeRepository;
import com.treeleaf.anydone.serviceprovider.base.activity.MvpBaseActivity_MembersInjector;
import com.treeleaf.anydone.serviceprovider.base.fragment.BaseFragment_MembersInjector;
import com.treeleaf.anydone.serviceprovider.changepassword.ChangePasswordActivity;
import com.treeleaf.anydone.serviceprovider.changepassword.ChangePasswordPresenterImpl;
import com.treeleaf.anydone.serviceprovider.changepassword.ChangePasswordRepository;
import com.treeleaf.anydone.serviceprovider.editprofile.EditProfileActivity;
import com.treeleaf.anydone.serviceprovider.editprofile.EditProfilePresenterImpl;
import com.treeleaf.anydone.serviceprovider.editprofile.EditProfileRepository;
import com.treeleaf.anydone.serviceprovider.forgotpassword.ForgotPasswordActivity;
import com.treeleaf.anydone.serviceprovider.forgotpassword.ForgotPasswordPresenterImpl;
import com.treeleaf.anydone.serviceprovider.forgotpassword.ForgotPasswordRepository;
import com.treeleaf.anydone.serviceprovider.forgotpassword.resetpassword.ResetPasswordActivity;
import com.treeleaf.anydone.serviceprovider.forgotpassword.resetpassword.ResetPasswordPresenterImpl;
import com.treeleaf.anydone.serviceprovider.forgotpassword.resetpassword.ResetPasswordRepository;
import com.treeleaf.anydone.serviceprovider.forgotpassword.verifyCode.VerifyCodeActivity;
import com.treeleaf.anydone.serviceprovider.forgotpassword.verifyCode.VerifyCodePresenterImpl;
import com.treeleaf.anydone.serviceprovider.forgotpassword.verifyCode.VerifyCodePresenterImpl_Factory;
import com.treeleaf.anydone.serviceprovider.forgotpassword.verifyCode.VerifyCodeRepository;
import com.treeleaf.anydone.serviceprovider.injection.module.ActivityModule;
import com.treeleaf.anydone.serviceprovider.injection.module.ApplicationModule;
import com.treeleaf.anydone.serviceprovider.injection.module.NetworkModule;
import com.treeleaf.anydone.serviceprovider.injection.module.NetworkModule_GetOkHttpClientFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.NetworkModule_GetRetrofitFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.NetworkModule_GetSchServiceFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetAccountRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetActivityRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetAddLocationRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetAddTicketRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetAssignEmployeeRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetAssignableTicketRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetAssignedTicketRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetChangePasswordRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetClosedTicketRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetCurrencyRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetEditProfileRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetForgotPasswordRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetLanguageRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetLoginRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetOngoingRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetPickLocationRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetProfileRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetResetPasswordRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetServiceRequestDetailActivityRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetServiceRequestDetailRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetServiceRequestRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetShowLocationRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetSubscribeableRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetSubscribedTicketRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetTicketConversationRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetTicketDetailRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetTicketTimelineRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetTicketsRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetTimezoneRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetVerificationRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.injection.module.PresenterModule_GetVerifyCodeRepositoryFactory;
import com.treeleaf.anydone.serviceprovider.login.LoginActivity;
import com.treeleaf.anydone.serviceprovider.login.LoginPresenterImpl;
import com.treeleaf.anydone.serviceprovider.login.LoginRepository;
import com.treeleaf.anydone.serviceprovider.picklocation.PickLocationActivity;
import com.treeleaf.anydone.serviceprovider.picklocation.PickLocationPresenterImpl;
import com.treeleaf.anydone.serviceprovider.picklocation.PickLocationRepository;
import com.treeleaf.anydone.serviceprovider.profile.ProfileActivity;
import com.treeleaf.anydone.serviceprovider.profile.ProfilePresenterImpl;
import com.treeleaf.anydone.serviceprovider.profile.ProfileRepository;
import com.treeleaf.anydone.serviceprovider.rest.service.AnyDoneService;
import com.treeleaf.anydone.serviceprovider.servicerequestdetail.ServiceRequestDetailFragment;
import com.treeleaf.anydone.serviceprovider.servicerequestdetail.ServiceRequestDetailPresenterImpl;
import com.treeleaf.anydone.serviceprovider.servicerequestdetail.ServiceRequestDetailRepository;
import com.treeleaf.anydone.serviceprovider.servicerequestdetail.activityFragment.ActivityFragment;
import com.treeleaf.anydone.serviceprovider.servicerequestdetail.activityFragment.ActivityPresenterImpl;
import com.treeleaf.anydone.serviceprovider.servicerequestdetail.activityFragment.ActivityRepository;
import com.treeleaf.anydone.serviceprovider.servicerequestdetail.servicerequestdetailactivity.ServiceRequestDetailActivity;
import com.treeleaf.anydone.serviceprovider.servicerequestdetail.servicerequestdetailactivity.ServiceRequestDetailActivityPresenterImpl;
import com.treeleaf.anydone.serviceprovider.servicerequestdetail.servicerequestdetailactivity.ServiceRequestDetailActivityRepository;
import com.treeleaf.anydone.serviceprovider.servicerequests.ServiceRequestFragment;
import com.treeleaf.anydone.serviceprovider.servicerequests.ServiceRequestPresenterImpl;
import com.treeleaf.anydone.serviceprovider.servicerequests.ServiceRequestRepository;
import com.treeleaf.anydone.serviceprovider.servicerequests.accepted.AcceptedPresenterImpl;
import com.treeleaf.anydone.serviceprovider.servicerequests.accepted.AcceptedRepository;
import com.treeleaf.anydone.serviceprovider.servicerequests.accepted.AcceptedRequestFragment;
import com.treeleaf.anydone.serviceprovider.setting.SettingsActivity;
import com.treeleaf.anydone.serviceprovider.setting.SettingsPresenterImpl;
import com.treeleaf.anydone.serviceprovider.setting.currency.CurrencyPresenterImpl;
import com.treeleaf.anydone.serviceprovider.setting.currency.CurrencyRepository;
import com.treeleaf.anydone.serviceprovider.setting.currency.SelectCurrencyActivity;
import com.treeleaf.anydone.serviceprovider.setting.language.LanguagePresenterImpl;
import com.treeleaf.anydone.serviceprovider.setting.language.LanguageRepository;
import com.treeleaf.anydone.serviceprovider.setting.language.LanguagesActivity;
import com.treeleaf.anydone.serviceprovider.setting.location.AddLocationActivity;
import com.treeleaf.anydone.serviceprovider.setting.location.AddLocationPresenterImpl;
import com.treeleaf.anydone.serviceprovider.setting.location.AddLocationRepository;
import com.treeleaf.anydone.serviceprovider.setting.location.showLocation.ShowLocationActivity;
import com.treeleaf.anydone.serviceprovider.setting.location.showLocation.ShowLocationPresenterImpl;
import com.treeleaf.anydone.serviceprovider.setting.location.showLocation.ShowLocationRepository;
import com.treeleaf.anydone.serviceprovider.setting.timezone.SelectTimezoneActivity;
import com.treeleaf.anydone.serviceprovider.setting.timezone.TimezonePresenterImpl;
import com.treeleaf.anydone.serviceprovider.setting.timezone.TimezoneRepository;
import com.treeleaf.anydone.serviceprovider.ticketdetails.TicketDetailsActivity;
import com.treeleaf.anydone.serviceprovider.ticketdetails.TicketDetailsPresenterImpl;
import com.treeleaf.anydone.serviceprovider.ticketdetails.TicketDetailsRepository;
import com.treeleaf.anydone.serviceprovider.ticketdetails.ticketconversation.TicketConversationFragment;
import com.treeleaf.anydone.serviceprovider.ticketdetails.ticketconversation.TicketConversationPresenterImpl;
import com.treeleaf.anydone.serviceprovider.ticketdetails.ticketconversation.TicketConversationRepository;
import com.treeleaf.anydone.serviceprovider.ticketdetails.tickettimeline.TicketTimelineFragment;
import com.treeleaf.anydone.serviceprovider.ticketdetails.tickettimeline.TicketTimelinePresenterImpl;
import com.treeleaf.anydone.serviceprovider.ticketdetails.tickettimeline.TicketTimelineRepository;
import com.treeleaf.anydone.serviceprovider.tickets.TicketsFragment;
import com.treeleaf.anydone.serviceprovider.tickets.TicketsPresenterImpl;
import com.treeleaf.anydone.serviceprovider.tickets.TicketsRepository;
import com.treeleaf.anydone.serviceprovider.tickets.assignedtickets.AssignedTicketPresenterImpl;
import com.treeleaf.anydone.serviceprovider.tickets.assignedtickets.AssignedTicketRepository;
import com.treeleaf.anydone.serviceprovider.tickets.assignedtickets.AssignedTicketsFragment;
import com.treeleaf.anydone.serviceprovider.tickets.closedresolvedtickets.ClosedTicketPresenterImpl;
import com.treeleaf.anydone.serviceprovider.tickets.closedresolvedtickets.ClosedTicketRepository;
import com.treeleaf.anydone.serviceprovider.tickets.closedresolvedtickets.ClosedTicketsFragment;
import com.treeleaf.anydone.serviceprovider.tickets.subscribetickets.SubscribeTicketPresenterImpl;
import com.treeleaf.anydone.serviceprovider.tickets.subscribetickets.SubscribeTicketRepository;
import com.treeleaf.anydone.serviceprovider.tickets.subscribetickets.SubscribeTicketsFragment;
import com.treeleaf.anydone.serviceprovider.tickets.unassignedtickets.UnassignedTicketPresenterImpl;
import com.treeleaf.anydone.serviceprovider.tickets.unassignedtickets.UnassignedTicketRepository;
import com.treeleaf.anydone.serviceprovider.tickets.unassignedtickets.UnassignedTicketsActivity;
import com.treeleaf.anydone.serviceprovider.tickets.unsubscribedtickets.UnSubscribedTicketsActivity;
import com.treeleaf.anydone.serviceprovider.tickets.unsubscribedtickets.UnsubscribedTicketPresenterImpl;
import com.treeleaf.anydone.serviceprovider.tickets.unsubscribedtickets.UnsubscribedTicketRepository;
import com.treeleaf.anydone.serviceprovider.verification.VerificationActivity;
import com.treeleaf.anydone.serviceprovider.verification.VerificationPresenterImpl;
import com.treeleaf.anydone.serviceprovider.verification.VerificationRepository;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

public final class DaggerApplicationComponent implements ApplicationComponent {
  private PresenterModule presenterModule;

  private Provider<OkHttpClient> getOkHttpClientProvider;

  private Provider<Retrofit> getRetrofitProvider;

  private Provider<AnyDoneService> getSchServiceProvider;

  private DaggerApplicationComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static ApplicationComponent create() {
    return new Builder().build();
  }

  private AccountRepository getAccountRepository() {
    return PresenterModule_GetAccountRepositoryFactory.proxyGetAccountRepository(
        presenterModule, getSchServiceProvider.get());
  }

  private AccountPresenterImpl getAccountPresenterImpl() {
    return new AccountPresenterImpl(getAccountRepository());
  }

  private TicketsRepository getTicketsRepository() {
    return PresenterModule_GetTicketsRepositoryFactory.proxyGetTicketsRepository(
        presenterModule, getSchServiceProvider.get());
  }

  private TicketsPresenterImpl getTicketsPresenterImpl() {
    return new TicketsPresenterImpl(getTicketsRepository());
  }

  private ServiceRequestDetailRepository getServiceRequestDetailRepository() {
    return PresenterModule_GetServiceRequestDetailRepositoryFactory
        .proxyGetServiceRequestDetailRepository(presenterModule, getSchServiceProvider.get());
  }

  private ServiceRequestDetailPresenterImpl getServiceRequestDetailPresenterImpl() {
    return new ServiceRequestDetailPresenterImpl(getServiceRequestDetailRepository());
  }

  private ActivityRepository getActivityRepository() {
    return PresenterModule_GetActivityRepositoryFactory.proxyGetActivityRepository(
        presenterModule, getSchServiceProvider.get());
  }

  private ActivityPresenterImpl getActivityPresenterImpl() {
    return new ActivityPresenterImpl(getActivityRepository());
  }

  private AcceptedRepository getAcceptedRepository() {
    return PresenterModule_GetOngoingRepositoryFactory.proxyGetOngoingRepository(
        presenterModule, getSchServiceProvider.get());
  }

  private AcceptedPresenterImpl getAcceptedPresenterImpl() {
    return new AcceptedPresenterImpl(getAcceptedRepository());
  }

  private ServiceRequestRepository getServiceRequestRepository() {
    return PresenterModule_GetServiceRequestRepositoryFactory.proxyGetServiceRequestRepository(
        presenterModule, getSchServiceProvider.get());
  }

  private ServiceRequestPresenterImpl getServiceRequestPresenterImpl() {
    return new ServiceRequestPresenterImpl(getServiceRequestRepository());
  }

  private AssignedTicketRepository getAssignedTicketRepository() {
    return PresenterModule_GetAssignedTicketRepositoryFactory.proxyGetAssignedTicketRepository(
        presenterModule, getSchServiceProvider.get());
  }

  private AssignedTicketPresenterImpl getAssignedTicketPresenterImpl() {
    return new AssignedTicketPresenterImpl(getAssignedTicketRepository());
  }

  private SubscribeTicketRepository getSubscribeTicketRepository() {
    return PresenterModule_GetSubscribedTicketRepositoryFactory.proxyGetSubscribedTicketRepository(
        presenterModule, getSchServiceProvider.get());
  }

  private SubscribeTicketPresenterImpl getSubscribeTicketPresenterImpl() {
    return new SubscribeTicketPresenterImpl(getSubscribeTicketRepository());
  }

  private ClosedTicketRepository getClosedTicketRepository() {
    return PresenterModule_GetClosedTicketRepositoryFactory.proxyGetClosedTicketRepository(
        presenterModule, getSchServiceProvider.get());
  }

  private ClosedTicketPresenterImpl getClosedTicketPresenterImpl() {
    return new ClosedTicketPresenterImpl(getClosedTicketRepository());
  }

  private TicketConversationRepository getTicketConversationRepository() {
    return PresenterModule_GetTicketConversationRepositoryFactory
        .proxyGetTicketConversationRepository(presenterModule, getSchServiceProvider.get());
  }

  private TicketConversationPresenterImpl getTicketConversationPresenterImpl() {
    return new TicketConversationPresenterImpl(getTicketConversationRepository());
  }

  private TicketTimelineRepository getTicketTimelineRepository() {
    return PresenterModule_GetTicketTimelineRepositoryFactory.proxyGetTicketTimelineRepository(
        presenterModule, getSchServiceProvider.get());
  }

  private TicketTimelinePresenterImpl getTicketTimelinePresenterImpl() {
    return new TicketTimelinePresenterImpl(getTicketTimelineRepository());
  }

  private LoginRepository getLoginRepository() {
    return PresenterModule_GetLoginRepositoryFactory.proxyGetLoginRepository(
        presenterModule, getSchServiceProvider.get());
  }

  private VerificationRepository getVerificationRepository() {
    return PresenterModule_GetVerificationRepositoryFactory.proxyGetVerificationRepository(
        presenterModule, getSchServiceProvider.get());
  }

  private ProfileRepository getProfileRepository() {
    return PresenterModule_GetProfileRepositoryFactory.proxyGetProfileRepository(
        presenterModule, getSchServiceProvider.get());
  }

  private ChangePasswordRepository getChangePasswordRepository() {
    return PresenterModule_GetChangePasswordRepositoryFactory.proxyGetChangePasswordRepository(
        presenterModule, getSchServiceProvider.get());
  }

  private EditProfileRepository getEditProfileRepository() {
    return PresenterModule_GetEditProfileRepositoryFactory.proxyGetEditProfileRepository(
        presenterModule, getSchServiceProvider.get());
  }

  private ForgotPasswordRepository getForgotPasswordRepository() {
    return PresenterModule_GetForgotPasswordRepositoryFactory.proxyGetForgotPasswordRepository(
        presenterModule, getSchServiceProvider.get());
  }

  private VerifyCodeRepository getVerifyCodeRepository() {
    return PresenterModule_GetVerifyCodeRepositoryFactory.proxyGetVerifyCodeRepository(
        presenterModule, getSchServiceProvider.get());
  }

  private ResetPasswordRepository getResetPasswordRepository() {
    return PresenterModule_GetResetPasswordRepositoryFactory.proxyGetResetPasswordRepository(
        presenterModule, getSchServiceProvider.get());
  }

  private ServiceRequestDetailActivityRepository getServiceRequestDetailActivityRepository() {
    return PresenterModule_GetServiceRequestDetailActivityRepositoryFactory
        .proxyGetServiceRequestDetailActivityRepository(
            presenterModule, getSchServiceProvider.get());
  }

  private AddLocationRepository getAddLocationRepository() {
    return PresenterModule_GetAddLocationRepositoryFactory.proxyGetAddLocationRepository(
        presenterModule, getSchServiceProvider.get());
  }

  private TimezoneRepository getTimezoneRepository() {
    return PresenterModule_GetTimezoneRepositoryFactory.proxyGetTimezoneRepository(
        presenterModule, getSchServiceProvider.get());
  }

  private CurrencyRepository getCurrencyRepository() {
    return PresenterModule_GetCurrencyRepositoryFactory.proxyGetCurrencyRepository(
        presenterModule, getSchServiceProvider.get());
  }

  private ShowLocationRepository getShowLocationRepository() {
    return PresenterModule_GetShowLocationRepositoryFactory.proxyGetShowLocationRepository(
        presenterModule, getSchServiceProvider.get());
  }

  private PickLocationRepository getPickLocationRepository() {
    return PresenterModule_GetPickLocationRepositoryFactory.proxyGetPickLocationRepository(
        presenterModule, getSchServiceProvider.get());
  }

  private LanguageRepository getLanguageRepository() {
    return PresenterModule_GetLanguageRepositoryFactory.proxyGetLanguageRepository(
        presenterModule, getSchServiceProvider.get());
  }

  private UnassignedTicketRepository getUnassignedTicketRepository() {
    return PresenterModule_GetAssignableTicketRepositoryFactory.proxyGetAssignableTicketRepository(
        presenterModule, getSchServiceProvider.get());
  }

  private UnsubscribedTicketRepository getUnsubscribedTicketRepository() {
    return PresenterModule_GetSubscribeableRepositoryFactory.proxyGetSubscribeableRepository(
        presenterModule, getSchServiceProvider.get());
  }

  private TicketDetailsRepository getTicketDetailsRepository() {
    return PresenterModule_GetTicketDetailRepositoryFactory.proxyGetTicketDetailRepository(
        presenterModule, getSchServiceProvider.get());
  }

  private AddTicketRepository getAddTicketRepository() {
    return PresenterModule_GetAddTicketRepositoryFactory.proxyGetAddTicketRepository(
        presenterModule, getSchServiceProvider.get());
  }

  private AssignEmployeeRepository getAssignEmployeeRepository() {
    return PresenterModule_GetAssignEmployeeRepositoryFactory.proxyGetAssignEmployeeRepository(
        presenterModule, getSchServiceProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.presenterModule = builder.presenterModule;
    this.getOkHttpClientProvider =
        DoubleCheck.provider(NetworkModule_GetOkHttpClientFactory.create(builder.networkModule));
    this.getRetrofitProvider =
        DoubleCheck.provider(
            NetworkModule_GetRetrofitFactory.create(
                builder.networkModule, getOkHttpClientProvider));
    this.getSchServiceProvider =
        DoubleCheck.provider(
            NetworkModule_GetSchServiceFactory.create(builder.networkModule, getRetrofitProvider));
  }

  @Override
  public void inject(AccountFragment accountFragment) {
    injectAccountFragment(accountFragment);
  }

  @Override
  public void inject(TicketsFragment ticketsFragment) {
    injectTicketsFragment(ticketsFragment);
  }

  @Override
  public void inject(ServiceRequestDetailFragment homeFragment) {
    injectServiceRequestDetailFragment(homeFragment);
  }

  @Override
  public void inject(ActivityFragment activityFragment) {
    injectActivityFragment(activityFragment);
  }

  @Override
  public void inject(AcceptedRequestFragment acceptedRequestFragment) {
    injectAcceptedRequestFragment(acceptedRequestFragment);
  }

  @Override
  public void inject(ServiceRequestFragment serviceRequestFragment) {
    injectServiceRequestFragment(serviceRequestFragment);
  }

  @Override
  public void inject(AssignedTicketsFragment assignedTicketsFragment) {
    injectAssignedTicketsFragment(assignedTicketsFragment);
  }

  @Override
  public void inject(SubscribeTicketsFragment subscribeTicketsFragment) {
    injectSubscribeTicketsFragment(subscribeTicketsFragment);
  }

  @Override
  public void inject(ClosedTicketsFragment closedTicketsFragment) {
    injectClosedTicketsFragment(closedTicketsFragment);
  }

  @Override
  public void inject(TicketConversationFragment ticketConversationFragment) {
    injectTicketConversationFragment(ticketConversationFragment);
  }

  @Override
  public void inject(TicketTimelineFragment ticketTimelineFragment) {
    injectTicketTimelineFragment(ticketTimelineFragment);
  }

  @Override
  public ActivityComponent plus(ActivityModule activityModule) {
    return new ActivityComponentImpl(activityModule);
  }

  @CanIgnoreReturnValue
  private AccountFragment injectAccountFragment(AccountFragment instance) {
    BaseFragment_MembersInjector.injectPresenter(instance, getAccountPresenterImpl());
    return instance;
  }

  @CanIgnoreReturnValue
  private TicketsFragment injectTicketsFragment(TicketsFragment instance) {
    BaseFragment_MembersInjector.injectPresenter(instance, getTicketsPresenterImpl());
    return instance;
  }

  @CanIgnoreReturnValue
  private ServiceRequestDetailFragment injectServiceRequestDetailFragment(
      ServiceRequestDetailFragment instance) {
    BaseFragment_MembersInjector.injectPresenter(instance, getServiceRequestDetailPresenterImpl());
    return instance;
  }

  @CanIgnoreReturnValue
  private ActivityFragment injectActivityFragment(ActivityFragment instance) {
    BaseFragment_MembersInjector.injectPresenter(instance, getActivityPresenterImpl());
    return instance;
  }

  @CanIgnoreReturnValue
  private AcceptedRequestFragment injectAcceptedRequestFragment(AcceptedRequestFragment instance) {
    BaseFragment_MembersInjector.injectPresenter(instance, getAcceptedPresenterImpl());
    return instance;
  }

  @CanIgnoreReturnValue
  private ServiceRequestFragment injectServiceRequestFragment(ServiceRequestFragment instance) {
    BaseFragment_MembersInjector.injectPresenter(instance, getServiceRequestPresenterImpl());
    return instance;
  }

  @CanIgnoreReturnValue
  private AssignedTicketsFragment injectAssignedTicketsFragment(AssignedTicketsFragment instance) {
    BaseFragment_MembersInjector.injectPresenter(instance, getAssignedTicketPresenterImpl());
    return instance;
  }

  @CanIgnoreReturnValue
  private SubscribeTicketsFragment injectSubscribeTicketsFragment(
      SubscribeTicketsFragment instance) {
    BaseFragment_MembersInjector.injectPresenter(instance, getSubscribeTicketPresenterImpl());
    return instance;
  }

  @CanIgnoreReturnValue
  private ClosedTicketsFragment injectClosedTicketsFragment(ClosedTicketsFragment instance) {
    BaseFragment_MembersInjector.injectPresenter(instance, getClosedTicketPresenterImpl());
    return instance;
  }

  @CanIgnoreReturnValue
  private TicketConversationFragment injectTicketConversationFragment(
      TicketConversationFragment instance) {
    BaseFragment_MembersInjector.injectPresenter(instance, getTicketConversationPresenterImpl());
    return instance;
  }

  @CanIgnoreReturnValue
  private TicketTimelineFragment injectTicketTimelineFragment(TicketTimelineFragment instance) {
    BaseFragment_MembersInjector.injectPresenter(instance, getTicketTimelinePresenterImpl());
    return instance;
  }

  public static final class Builder {
    private PresenterModule presenterModule;

    private NetworkModule networkModule;

    private Builder() {}

    public ApplicationComponent build() {
      if (presenterModule == null) {
        this.presenterModule = new PresenterModule();
      }
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      return new DaggerApplicationComponent(this);
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This
     *     method is a no-op. For more, see https://google.github.io/dagger/unused-modules.
     */
    @Deprecated
    public Builder applicationModule(ApplicationModule applicationModule) {
      Preconditions.checkNotNull(applicationModule);
      return this;
    }

    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }

    public Builder presenterModule(PresenterModule presenterModule) {
      this.presenterModule = Preconditions.checkNotNull(presenterModule);
      return this;
    }
  }

  private final class ActivityComponentImpl implements ActivityComponent {
    private ActivityComponentImpl(ActivityModule activityModule) {}

    private LoginPresenterImpl getLoginPresenterImpl() {
      return new LoginPresenterImpl(DaggerApplicationComponent.this.getLoginRepository());
    }

    private VerificationPresenterImpl getVerificationPresenterImpl() {
      return new VerificationPresenterImpl(
          DaggerApplicationComponent.this.getVerificationRepository());
    }

    private ProfilePresenterImpl getProfilePresenterImpl() {
      return new ProfilePresenterImpl(DaggerApplicationComponent.this.getProfileRepository());
    }

    private ChangePasswordPresenterImpl getChangePasswordPresenterImpl() {
      return new ChangePasswordPresenterImpl(
          DaggerApplicationComponent.this.getChangePasswordRepository());
    }

    private EditProfilePresenterImpl getEditProfilePresenterImpl() {
      return new EditProfilePresenterImpl(
          DaggerApplicationComponent.this.getEditProfileRepository());
    }

    private ForgotPasswordPresenterImpl getForgotPasswordPresenterImpl() {
      return new ForgotPasswordPresenterImpl(
          DaggerApplicationComponent.this.getForgotPasswordRepository());
    }

    private VerifyCodePresenterImpl getVerifyCodePresenterImpl() {
      return VerifyCodePresenterImpl_Factory.newVerifyCodePresenterImpl(
          DaggerApplicationComponent.this.getVerifyCodeRepository());
    }

    private ResetPasswordPresenterImpl getResetPasswordPresenterImpl() {
      return new ResetPasswordPresenterImpl(
          DaggerApplicationComponent.this.getResetPasswordRepository());
    }

    private ServiceRequestDetailActivityPresenterImpl
        getServiceRequestDetailActivityPresenterImpl() {
      return new ServiceRequestDetailActivityPresenterImpl(
          DaggerApplicationComponent.this.getServiceRequestDetailActivityRepository());
    }

    private AddLocationPresenterImpl getAddLocationPresenterImpl() {
      return new AddLocationPresenterImpl(
          DaggerApplicationComponent.this.getAddLocationRepository());
    }

    private TimezonePresenterImpl getTimezonePresenterImpl() {
      return new TimezonePresenterImpl(DaggerApplicationComponent.this.getTimezoneRepository());
    }

    private CurrencyPresenterImpl getCurrencyPresenterImpl() {
      return new CurrencyPresenterImpl(DaggerApplicationComponent.this.getCurrencyRepository());
    }

    private ShowLocationPresenterImpl getShowLocationPresenterImpl() {
      return new ShowLocationPresenterImpl(
          DaggerApplicationComponent.this.getShowLocationRepository());
    }

    private PickLocationPresenterImpl getPickLocationPresenterImpl() {
      return new PickLocationPresenterImpl(
          DaggerApplicationComponent.this.getPickLocationRepository());
    }

    private LanguagePresenterImpl getLanguagePresenterImpl() {
      return new LanguagePresenterImpl(DaggerApplicationComponent.this.getLanguageRepository());
    }

    private UnassignedTicketPresenterImpl getUnassignedTicketPresenterImpl() {
      return new UnassignedTicketPresenterImpl(
          DaggerApplicationComponent.this.getUnassignedTicketRepository());
    }

    private UnsubscribedTicketPresenterImpl getUnsubscribedTicketPresenterImpl() {
      return new UnsubscribedTicketPresenterImpl(
          DaggerApplicationComponent.this.getUnsubscribedTicketRepository());
    }

    private TicketDetailsPresenterImpl getTicketDetailsPresenterImpl() {
      return new TicketDetailsPresenterImpl(
          DaggerApplicationComponent.this.getTicketDetailsRepository());
    }

    private AddTicketPresenterImpl getAddTicketPresenterImpl() {
      return new AddTicketPresenterImpl(DaggerApplicationComponent.this.getAddTicketRepository());
    }

    private AssignEmployeePresenterImpl getAssignEmployeePresenterImpl() {
      return new AssignEmployeePresenterImpl(
          DaggerApplicationComponent.this.getAssignEmployeeRepository());
    }

    @Override
    public void inject(LoginActivity loginActivity) {
      injectLoginActivity(loginActivity);
    }

    @Override
    public void inject(VerificationActivity verificationActivity) {
      injectVerificationActivity(verificationActivity);
    }

    @Override
    public void inject(ProfileActivity profileActivity) {
      injectProfileActivity(profileActivity);
    }

    @Override
    public void inject(ChangePasswordActivity changePasswordActivity) {
      injectChangePasswordActivity(changePasswordActivity);
    }

    @Override
    public void inject(EditProfileActivity editProfileActivity) {
      injectEditProfileActivity(editProfileActivity);
    }

    @Override
    public void inject(SettingsActivity settingsActivity) {
      injectSettingsActivity(settingsActivity);
    }

    @Override
    public void inject(ForgotPasswordActivity forgotPasswordActivity) {
      injectForgotPasswordActivity(forgotPasswordActivity);
    }

    @Override
    public void inject(VerifyCodeActivity verifyCodeActivity) {
      injectVerifyCodeActivity(verifyCodeActivity);
    }

    @Override
    public void inject(ResetPasswordActivity resetPasswordActivity) {
      injectResetPasswordActivity(resetPasswordActivity);
    }

    @Override
    public void inject(ServiceRequestDetailActivity serviceRequestActivity) {
      injectServiceRequestDetailActivity(serviceRequestActivity);
    }

    @Override
    public void inject(AddLocationActivity addLocationActivity) {
      injectAddLocationActivity(addLocationActivity);
    }

    @Override
    public void inject(SelectTimezoneActivity selectTimezoneActivity) {
      injectSelectTimezoneActivity(selectTimezoneActivity);
    }

    @Override
    public void inject(SelectCurrencyActivity selectCurrencyActivity) {
      injectSelectCurrencyActivity(selectCurrencyActivity);
    }

    @Override
    public void inject(ShowLocationActivity showLocationActivity) {
      injectShowLocationActivity(showLocationActivity);
    }

    @Override
    public void inject(PickLocationActivity pickLocationActivity) {
      injectPickLocationActivity(pickLocationActivity);
    }

    @Override
    public void inject(LanguagesActivity languagesActivity) {
      injectLanguagesActivity(languagesActivity);
    }

    @Override
    public void inject(UnassignedTicketsActivity unassignedTicketsActivity) {
      injectUnassignedTicketsActivity(unassignedTicketsActivity);
    }

    @Override
    public void inject(UnSubscribedTicketsActivity unSubscribedTicketsActivity) {
      injectUnSubscribedTicketsActivity(unSubscribedTicketsActivity);
    }

    @Override
    public void inject(TicketDetailsActivity ticketDetailsActivity) {
      injectTicketDetailsActivity(ticketDetailsActivity);
    }

    @Override
    public void inject(AddTicketActivity addTicketActivity) {
      injectAddTicketActivity(addTicketActivity);
    }

    @Override
    public void inject(AssignEmployeeActivity assignEmployeeActivity) {
      injectAssignEmployeeActivity(assignEmployeeActivity);
    }

    @CanIgnoreReturnValue
    private LoginActivity injectLoginActivity(LoginActivity instance) {
      MvpBaseActivity_MembersInjector.injectPresenter(instance, getLoginPresenterImpl());
      return instance;
    }

    @CanIgnoreReturnValue
    private VerificationActivity injectVerificationActivity(VerificationActivity instance) {
      MvpBaseActivity_MembersInjector.injectPresenter(instance, getVerificationPresenterImpl());
      return instance;
    }

    @CanIgnoreReturnValue
    private ProfileActivity injectProfileActivity(ProfileActivity instance) {
      MvpBaseActivity_MembersInjector.injectPresenter(instance, getProfilePresenterImpl());
      return instance;
    }

    @CanIgnoreReturnValue
    private ChangePasswordActivity injectChangePasswordActivity(ChangePasswordActivity instance) {
      MvpBaseActivity_MembersInjector.injectPresenter(instance, getChangePasswordPresenterImpl());
      return instance;
    }

    @CanIgnoreReturnValue
    private EditProfileActivity injectEditProfileActivity(EditProfileActivity instance) {
      MvpBaseActivity_MembersInjector.injectPresenter(instance, getEditProfilePresenterImpl());
      return instance;
    }

    @CanIgnoreReturnValue
    private SettingsActivity injectSettingsActivity(SettingsActivity instance) {
      MvpBaseActivity_MembersInjector.injectPresenter(instance, new SettingsPresenterImpl());
      return instance;
    }

    @CanIgnoreReturnValue
    private ForgotPasswordActivity injectForgotPasswordActivity(ForgotPasswordActivity instance) {
      MvpBaseActivity_MembersInjector.injectPresenter(instance, getForgotPasswordPresenterImpl());
      return instance;
    }

    @CanIgnoreReturnValue
    private VerifyCodeActivity injectVerifyCodeActivity(VerifyCodeActivity instance) {
      MvpBaseActivity_MembersInjector.injectPresenter(instance, getVerifyCodePresenterImpl());
      return instance;
    }

    @CanIgnoreReturnValue
    private ResetPasswordActivity injectResetPasswordActivity(ResetPasswordActivity instance) {
      MvpBaseActivity_MembersInjector.injectPresenter(instance, getResetPasswordPresenterImpl());
      return instance;
    }

    @CanIgnoreReturnValue
    private ServiceRequestDetailActivity injectServiceRequestDetailActivity(
        ServiceRequestDetailActivity instance) {
      MvpBaseActivity_MembersInjector.injectPresenter(
          instance, getServiceRequestDetailActivityPresenterImpl());
      return instance;
    }

    @CanIgnoreReturnValue
    private AddLocationActivity injectAddLocationActivity(AddLocationActivity instance) {
      MvpBaseActivity_MembersInjector.injectPresenter(instance, getAddLocationPresenterImpl());
      return instance;
    }

    @CanIgnoreReturnValue
    private SelectTimezoneActivity injectSelectTimezoneActivity(SelectTimezoneActivity instance) {
      MvpBaseActivity_MembersInjector.injectPresenter(instance, getTimezonePresenterImpl());
      return instance;
    }

    @CanIgnoreReturnValue
    private SelectCurrencyActivity injectSelectCurrencyActivity(SelectCurrencyActivity instance) {
      MvpBaseActivity_MembersInjector.injectPresenter(instance, getCurrencyPresenterImpl());
      return instance;
    }

    @CanIgnoreReturnValue
    private ShowLocationActivity injectShowLocationActivity(ShowLocationActivity instance) {
      MvpBaseActivity_MembersInjector.injectPresenter(instance, getShowLocationPresenterImpl());
      return instance;
    }

    @CanIgnoreReturnValue
    private PickLocationActivity injectPickLocationActivity(PickLocationActivity instance) {
      MvpBaseActivity_MembersInjector.injectPresenter(instance, getPickLocationPresenterImpl());
      return instance;
    }

    @CanIgnoreReturnValue
    private LanguagesActivity injectLanguagesActivity(LanguagesActivity instance) {
      MvpBaseActivity_MembersInjector.injectPresenter(instance, getLanguagePresenterImpl());
      return instance;
    }

    @CanIgnoreReturnValue
    private UnassignedTicketsActivity injectUnassignedTicketsActivity(
        UnassignedTicketsActivity instance) {
      MvpBaseActivity_MembersInjector.injectPresenter(instance, getUnassignedTicketPresenterImpl());
      return instance;
    }

    @CanIgnoreReturnValue
    private UnSubscribedTicketsActivity injectUnSubscribedTicketsActivity(
        UnSubscribedTicketsActivity instance) {
      MvpBaseActivity_MembersInjector.injectPresenter(
          instance, getUnsubscribedTicketPresenterImpl());
      return instance;
    }

    @CanIgnoreReturnValue
    private TicketDetailsActivity injectTicketDetailsActivity(TicketDetailsActivity instance) {
      MvpBaseActivity_MembersInjector.injectPresenter(instance, getTicketDetailsPresenterImpl());
      return instance;
    }

    @CanIgnoreReturnValue
    private AddTicketActivity injectAddTicketActivity(AddTicketActivity instance) {
      MvpBaseActivity_MembersInjector.injectPresenter(instance, getAddTicketPresenterImpl());
      return instance;
    }

    @CanIgnoreReturnValue
    private AssignEmployeeActivity injectAssignEmployeeActivity(AssignEmployeeActivity instance) {
      MvpBaseActivity_MembersInjector.injectPresenter(instance, getAssignEmployeePresenterImpl());
      return instance;
    }
  }
}
